#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Replace with your network credentials
const char* ssid = "wifi-name";
const char* password = "password";

// Create an instance of the server
ESP8266WebServer server(80);

// Motor control pins
int motor1pin1 = D5;
int motor1pin2 = D6;
int motor2pin1 = D7;
int motor2pin2 = D8;

// Ultrasonic sensor pins
const int trigPin = D1;
const int echoPin = D2;

// HTML code for the web page
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Car Controller</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(45deg, #1e3c72, #2a5298);
            color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .controller {
            display: grid;
            grid-template-areas:
                ". up ."
                "left stop right"
                ". down .";
            gap: 10px;
        }
        .controller button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 20px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s, transform 0.3s;
        }
        .controller button:hover {
            background-color: #0056b3;
            transform: scale(1.1);
        }
        .controller button:active {
            background-color: #004494;
        }
        .up { grid-area: up; }
        .down { grid-area: down; }
        .left { grid-area: left; }
        .right { grid-area: right; }
        .stop { grid-area: stop; }
        .monitor {
            margin-top: 20px;
            padding: 10px;
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid #ccc;
            border-radius: 4px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="controller">
        <button class="up" ontouchstart="sendCommand('forward')" ontouchend="sendCommand('stop')" onmousedown="sendCommand('forward')" onmouseup="sendCommand('stop')">Forward</button>
        <button class="down" ontouchstart="sendCommand('backward')" ontouchend="sendCommand('stop')" onmousedown="sendCommand('backward')" onmouseup="sendCommand('stop')">Backward</button>
        <button class="left" ontouchstart="sendCommand('left')" ontouchend="sendCommand('stop')" onmousedown="sendCommand('left')" onmouseup="sendCommand('stop')">Left</button>
        <button class="right" ontouchstart="sendCommand('right')" ontouchend="sendCommand('stop')" onmousedown="sendCommand('right')" onmouseup="sendCommand('stop')">Right</button>
        <button class="stop" ontouchstart="sendCommand('stop')" onmousedown="sendCommand('stop')">Stop</button>
    </div>
    <div class="monitor">
        Ground Clearance: <span id="clearance">0</span> cm
    </div>
    <script>
        function sendCommand(command) {
            fetch(/control?command=${command});
        }

        async function fetchClearance() {
            const response = await fetch('/clearance');
            const data = await response.text();
            document.getElementById('clearance').textContent = data;
        }

        setInterval(fetchClearance, 1000);
    </script>
</body>
</html>
)rawliteral";

void setup() {
    Serial.begin(115200);
    delay(10);

    // Initialize motor pins
    pinMode(motor1pin1, OUTPUT);
    pinMode(motor1pin2, OUTPUT);
    pinMode(motor2pin1, OUTPUT);
    pinMode(motor2pin2, OUTPUT);

    // Initialize ultrasonic sensor pins
    pinMode(trigPin, OUTPUT);
    pinMode(echoPin, INPUT);

    // Connect to Wi-Fi
    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());

    // Define the root URL and what to serve
    server.on("/", HTTP_GET, []() {
        server.send_P(200, "text/html", index_html);
    });

    // Define the control URL and how to handle it
    server.on("/control", HTTP_GET, []() {
        String command = server.arg("command");

        if (command == "forward") {
            digitalWrite(motor1pin1, HIGH);
            digitalWrite(motor2pin1, HIGH);
            digitalWrite(motor1pin2, LOW);
            digitalWrite(motor2pin2, LOW);
        } else if (command == "backward") {
            digitalWrite(motor1pin1, LOW);
            digitalWrite(motor2pin1, LOW);
            digitalWrite(motor1pin2, HIGH);
            digitalWrite(motor2pin2, HIGH);
        } else if (command == "left") {
            digitalWrite(motor1pin1, LOW);
            digitalWrite(motor2pin1, HIGH);
            digitalWrite(motor1pin2, HIGH);
            digitalWrite(motor2pin2, LOW);
        } else if (command == "right") {
            digitalWrite(motor1pin1, HIGH);
            digitalWrite(motor2pin1, LOW);
            digitalWrite(motor1pin2, LOW);
            digitalWrite(motor2pin2, HIGH);
        } else if (command == "stop") {
            digitalWrite(motor1pin1, LOW);
            digitalWrite(motor2pin1, LOW);
            digitalWrite(motor1pin2, LOW);
            digitalWrite(motor2pin2, LOW);
        }

        server.send(200, "text/plain", "OK");
    });

    // Define the clearance URL and how to handle it
    server.on("/clearance", HTTP_GET, []() {
        long duration, distance;
        digitalWrite(trigPin, LOW);
        delayMicroseconds(2);
        digitalWrite(trigPin, HIGH);
        delayMicroseconds(10);
        digitalWrite(trigPin, LOW);
        duration = pulseIn(echoPin, HIGH);
        distance = (duration / 2) / 29.1;

        server.send(200, "text/plain", String(distance));
    });

    // Start the server
    server.begin();
}

void loop() {
    server.handleClient();
}
